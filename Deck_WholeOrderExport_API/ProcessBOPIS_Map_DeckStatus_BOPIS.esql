/*****************************************************************************
* Component Name	: Deck_WholeOrderExport_API								 *
* Flow Name			: Deck_WholeOrderExport_API.msgflow						 *
* File Name  		: ProcessBOPIS_Map_DeckStatus_BOPIS.esql				 *
*                                                                            *
* Description		: This ESQL File creates request to be sent to BOPIS API *
* 																			 *
* ***************************Revision History*********************************
* Author 					Date			Description						 *
* ===============		=============	============================		 *
* Prakash Chandra 		May-14-2021		Initial Code						 * 
* Prakash Chandra 		Feb-18-2022		Added logging code					 * 
*																			 *
******************************************************************************/

CREATE COMPUTE MODULE ProcessBOPIS_Map_DeckStatus_BOPIS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		--Declare Variables
		DECLARE Input 																		REFERENCE TO InputRoot.JSON.Data;
		DECLARE X,Y,Z																		INTEGER 1;
		DECLARE	OrderItemIndex,OrderItemID,ShpmntIndex,ShpmntItemsIndex,DiscountIndex		INTEGER;
		DECLARE Discounts 																	FLOAT 0; 
		DECLARE Ref_Env		   																REFERENCE TO Environment;
		
		--Set Environment variables to create Audit message
		SET Environment.Variables.AuditMessage 				= NULL;
		SET Environment.Variables.Info.SubflowName 			= 'ProcessBOPIS';
		SET Environment.Variables.Info.Header 				= NULL;
		SET Environment.Variables.Info.Payload 				= NULL;
		SET Environment.Variables.Info.Priority 			= '0';
		MOVE Ref_Env TO Environment.Variables;
		
		--Call Audit procedure to create Audit Message and send it to Queue
       	CALL com.nb.esb.iib.cmn.logging.PROC_Audit(Ref_Env, 'REQUEST', 'IIB_TO_MAPPING','Mapping');
       	SET OutputRoot.JSON.Data.AuditMessage = Ref_Env.AuditMessage;
		PROPAGATE TO LABEL 'ToAudit';
		
		-- Maintain original request parameters
		SET Environment.Variables.RequestJSON = Input; 
		
		--Set SiteCode Value and APIType to Fetch NB API Details from Cache
		SET Environment.cSiteCode	= 'DECKBOPISNA';
		
		--Get Index Value from Environmebt Variable and get ID from OrderItems.
		SET OrderItemIndex	= Environment.Variables.Index;
		SET OrderItemID		= Input.Order.OrderItems.Item[OrderItemIndex].ID;
		
		--Loop to find corresponding OrderShipments Item Index for OrderItems Item based on OrderItemID Value.
		FOR COUNT AS Input.Order.OrderShipments.Item[] DO
			SET Y = 1;
			FOR COUNT1 AS Input.Order.OrderShipments.Item[Z].Items.Item[] DO
				IF OrderItemID = Input.Order.OrderShipments.Item[Z].Items.Item[Y].OrderItemID THEN
					SET ShpmntItemsIndex	= Y;
					SET ShpmntIndex			= Z;
				END IF;
				SET Y	= Y+1;
			END FOR;
			SET Z	= Z+1;
		END FOR;	
		
		--Mapping Output to BPOIS API fromat
		SET OutputRoot.JSON.Data.Credit.orderId 				= Input.Order.OrderNumber;
		SET OutputRoot.JSON.Data.Credit.orderReference 			= Input.Order.OrderNumber || '-' ||CAST(Input.Order.OrderShipments.Item[ShpmntIndex].WarehouseCountNumber AS CHAR);
		SET OutputRoot.JSON.Data.Credit.shipmentId 				= Input.Order.OrderNumber || '-' ||CAST(Input.Order.OrderShipments.Item[ShpmntIndex].WarehouseCountNumber AS CHAR);
		SET OutputRoot.JSON.Data.Credit.orderDate 				= SUBSTRING(Input.Order.OrderDateUTC FROM 1 FOR 25);
		SET OutputRoot.JSON.Data.Credit.shipDate 				= SUBSTRING(Input.Order.OrderShipments.Item[ShpmntIndex].DateShipped FROM 1 FOR 25);
		SET OutputRoot.JSON.Data.Credit.storeTotal 				= Input.Order.OrderItems.Item[OrderItemIndex].GrossPrice; --Input.Order.OrderShipments.Item[ShpmntIndex].SimpleTotals.Total; 
		SET OutputRoot.JSON.Data.Credit.shippingFee 			= Input.Order.OrderShipments.Item[ShpmntIndex].SimpleTotals.Shipping;
		SET OutputRoot.JSON.Data.Credit.taX 					= Input.Order.OrderShipments.Item[ShpmntIndex].SimpleTotals.TaX;
		SET OutputRoot.JSON.Data.Credit.currency 				= 'USD';
		
		SET OutputRoot.JSON.Data.Credit.creditItems.Item[X].storeId 	= COALESCE(Input.Order.OrderItems.Item[OrderItemIndex].WarehouseCode,' ');
		SET OutputRoot.JSON.Data.Credit.creditItems.Item[X].upc 		= Input.Order.OrderItems.Item[OrderItemIndex].GTIN;
		SET Environment.Variables.UPC									= Input.Order.OrderItems.Item[OrderItemIndex].GTIN;
		SET OutputRoot.JSON.Data.Credit.creditItems.Item[X].quantity 	= '1';
		SET DiscountIndex = 1;
		FOR count AS Input.Order.OrderItems.Item[OrderItemIndex].OrderItemAdjustments.Item[] DO
			IF Input.Order.OrderItems.Item[OrderItemIndex].OrderItemAdjustments.Item[DiscountIndex].AdjustmentType = 12 OR Input.Order.OrderItems.Item[OrderItemIndex].OrderItemAdjustments.Item[DiscountIndex].AdjustmentType = 1 THEN
				SET Discounts = COALESCE(Discounts + Input.Order.OrderItems.Item[OrderItemIndex].OrderItemAdjustments.Item[DiscountIndex].NetPrice, Input.Order.OrderItems.Item[OrderItemIndex].OrderItemAdjustments.Item[DiscountIndex].NetPrice);
				SET DiscountIndex = DiscountIndex + 1;
			ELSE
				SET Discounts = 0;
				SET DiscountIndex = DiscountIndex + 1;
			END IF;
		END FOR;
		SET OutputRoot.JSON.Data.Credit.creditItems.Item[X].price 		= Input.Order.OrderItems.Item[OrderItemIndex].NetPrice - Discounts;
		SET OutputRoot.JSON.Data.Credit.creditItems.Item[X].totalAmount = Input.Order.OrderItems.Item[OrderItemIndex].TotalNetAdjustments;
		SET OutputRoot.JSON.Data.Credit.creditItems.Item[X].taX 		= Input.Order.OrderItems.Item[OrderItemIndex].OrderItemTaXes.Item[1].Amount;
		SET OutputRoot.JSON.Data.Credit.creditItems.Item[X].currency 	= 'USD';	
		
		SET OutputRoot.Properties 				= NULL;
		
		RETURN TRUE;
	END;

END MODULE;
