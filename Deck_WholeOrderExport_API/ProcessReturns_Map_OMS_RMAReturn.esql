/*****************************************************************************
* Component Name	: Deck_WholeOrderExport_API								 *
* Flow Name			: Deck_WholeOrderExport_API.msgflow						 *
* File Name  		: ProcessReturns_Map_OMS_RMAReturn.esql					 *
*                                                                            *
* Description		: This ESQL File creates request to be sent to RMA API 	 *
* 																			 *
* ***************************Revision History*********************************
* Author 					Date			Description						 *
* ===============		=============	============================		 *
* Prakash Chandra 		May-14-2021		Initial Code						 * 
* Prakash Chandra 		Feb-18-2022		Added logging code					 * 
*																			 *
******************************************************************************/

CREATE COMPUTE MODULE ProcessReturns_Map_OMS_RMAReturn
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		--Declare Variables
		DECLARE	OrderItemIndex,OrderItemID,ShpmntIndex,ShpmntItemsIndex		INTEGER;
		DECLARE X,Y,Z,Index,I												INTEGER 1;
		DECLARE OrderNotesCount,ItemsCount									INTEGER 0;
		DECLARE Style,Colour,Size,Temp,Reason,ReasonId,DetachFlag			CHARACTER;
		DECLARE ItemStatusDate												ROW;
		DECLARE LatestStatusDate,K,L										TIMESTAMP;
		DECLARE Input 														REFERENCE TO InputRoot.JSON.Data;
		DECLARE Ref_Env		   												REFERENCE TO Environment;
		DECLARE SkuList,ReasonList											CHARACTER ' ';
		
		--Set Environment variables to create Audit message
		SET Environment.Variables.AuditMessage 				= NULL;
		SET Environment.Variables.Info.SubflowName 			= 'ProcessReturn';
		SET Environment.Variables.Info.Header 				= NULL;
		SET Environment.Variables.Info.Payload 				= NULL;
		SET Environment.Variables.Info.Priority 			= '0';
		MOVE Ref_Env TO Environment.Variables;
		
		--Call Audit procedure to create Audit Message and send it to Queue
       	CALL com.nb.esb.iib.cmn.logging.PROC_Audit(Ref_Env, 'REQUEST', 'IIB_TO_MAPPING','Mapping');
       	SET OutputRoot.JSON.Data.AuditMessage = Ref_Env.AuditMessage;
		PROPAGATE TO LABEL 'ToAudit';
		
		-- Maintain original request parameters
		SET Environment.Variables.RequestJSON = Input; 
		
		--Loop to check if multiple returns are placed with different return reason.
		FOR COUNT AS Input.Order.OrderNotes.Item[] DO
			IF Input.Order.OrderNotes.Item[X].Group = '2' THEN
				SET OrderNotesCount 	= OrderNotesCount + 1;
			END IF;	
			SET X = X+1;
		END FOR;
		
		--Reset X
		SET X = 1;
		
		-- If multiple order notes are received Then Send only latest Order for which return is placed
		IF OrderNotesCount > 1 THEN
			
			--Get All Values of ItemStatusChangeDate in an array
			FOR COUNT AS Input.Order.OrderItems.Item[] DO
				IF UCASE(Input.Order.OrderItems.Item[X].ItemStatusName) = 'PENDING RETURN' THEN
					SET ItemStatusDate.Value[Y] = CAST(SUBSTRING(Input.Order.OrderItems.Item[X].ItemStatusChangeDate FROM 1 FOR 19) AS TIMESTAMP FORMAT 'YYYY-MM-dd''T''HH:mm:ss'); 
					SET Y = Y+1;
				END IF;	
				SET X = X+1;
			END FOR;
			
			--Reset X,Y
			SET X = 1;
			SET Y = 1;
				
			-- Find latest ItemStatusChangeDate
			SET LatestStatusDate 	= ItemStatusDate.Value[1];
			FOR COUNT AS ItemStatusDate.Value[] DO
				IF LatestStatusDate < ItemStatusDate.Value[X+1] THEN
					SET LatestStatusDate = ItemStatusDate.Value[X+1];
				END IF;	
				SET X = X+1;
			END FOR;
			
			--Reset X
			SET X = 1;
			
			-- Create request to be sent to RMA API
			FOR COUNT AS Input.Order.OrderItems.Item[] DO
				--Find Item based on LatestStatusDate to pick only latest Item for which status is changed
				SET K = CAST(SUBSTRING(Input.Order.OrderItems.Item[X].ItemStatusChangeDate FROM 1 FOR 19) AS TIMESTAMP FORMAT 'YYYY-MM-dd''T''HH:mm:ss');
				SET L = LatestStatusDate;
				IF (UCASE(Input.Order.OrderItems.Item[X].ItemStatusName) = 'PENDING RETURN') AND (LatestStatusDate = CAST(SUBSTRING(Input.Order.OrderItems.Item[X].ItemStatusChangeDate FROM 1 FOR 19) AS TIMESTAMP FORMAT 'YYYY-MM-dd''T''HH:mm:ss')) THEN
											
						--Loop to get value of Latest Return Reason ID
						FOR COUNT1 AS Input.Order.OrderNotes.Item[] DO
							IF Input.Order.OrderNotes.Item[Y].Group = '2' AND Reason IS NULL THEN
								SET Reason 		= Input.Order.OrderNotes.Item[Y].NoteMessage;
								SET ReasonId	= TRIM(SUBSTRING(Input.Order.OrderNotes.Item[Y].NoteMessage BEFORE '.'));
							END IF;	
							SET Y = Y+1;
						END FOR;
						
						--Reset Y
						SET Y = 1;
						
						--Get Current index value and value of element ID from OrderItems.
						SET OrderItemIndex	= X;
						SET OrderItemID		= Input.Order.OrderItems.Item[OrderItemIndex].ID;
						
						--Loop to find corresponding OrderShipments Item Index for OrderItems Item based on OrderItemID Value.
						FOR COUNT1 AS Input.Order.OrderShipments.Item[] DO
							SET Z = 1;
							FOR COUNT1 AS Input.Order.OrderShipments.Item[Y].Items.Item[] DO
								IF OrderItemID = Input.Order.OrderShipments.Item[Y].Items.Item[Z].OrderItemID THEN
									SET ShpmntItemsIndex	=	Z;
									SET ShpmntIndex			=	Y;
								END IF;
								SET Z	= Z+1;
							END FOR;
							SET Y	= Y+1;
						END FOR;
						
						--Throw error if Index to get WarehouseCountNumber is not found
						IF ShpmntIndex = '' OR ShpmntIndex IS NULL THEN
							THROW USER EXCEPTION MESSAGE 417 VALUES('Validation Error, WarehouseCountNumber not found for OrderNumber - '||Input.Order.OrderNumber );
						END IF;	
						
						--Reset Y,Z
						SET Y = 1;
						SET Z = 1;
						
						--Get value of SKU
						SET Style 	= SUBSTRING(Input.Order.OrderItems.Item[OrderItemIndex].DeckSKU BEFORE '-');
						SET Temp	= SUBSTRING(Input.Order.OrderItems.Item[OrderItemIndex].DeckSKU AFTER '-');
						SET Colour	= SUBSTRING(Temp BEFORE '-');
						SET Size	= SUBSTRING(Temp AFTER '-');
				
						--Mapping Output to BPOIS API fromat
						SET OutputRoot.JSON.Data.Item[Index].returnId 			= '';
						SET OutputRoot.JSON.Data.Item[Index].orderId 			= Input.Order.OrderNumber || '-' ||CAST(Input.Order.OrderShipments.Item[ShpmntIndex].WarehouseCountNumber AS CHAR);
						SET OutputRoot.JSON.Data.Item[Index].returnDate 		= COALESCE(SUBSTRING(Input.Order.OrderItems.Item[OrderItemIndex].ItemStatusChangeDate BEFORE 'T'), ' ');
				--		SET OutputRoot.JSON.Data.Item[Index].dueDate 			= '';
						
						IF ReasonId <>'' OR ReasonId IS NOT NULL THEN
							SET OutputRoot.JSON.Data.Item[Index].returnReason 	= ReasonId;
						END IF;	
						SET ReasonList											= ReasonList ||' '|| COALESCE(ReasonId,'');
						
				--		SET OutputRoot.JSON.Data.Item[Index].returnOfficer 		= '';
						SET OutputRoot.JSON.Data.Item[Index].sku			 	= com.nb.esb.iib.cmn.util.esql.utilities.compositeFieldForSKU(Style,Colour,Size);
						SET SkuList												= SkuList ||' '|| com.nb.esb.iib.cmn.util.esql.utilities.compositeFieldForSKU(Style,Colour,Size);
				--		SET OutputRoot.JSON.Data.Item[Index].upc		 		= '';
						SET OutputRoot.JSON.Data.Item[Index].returnQuantity 	= 1;
				--		SET OutputRoot.JSON.Data.Item[Index].altReturnNumber	= '';
						
						SET Index	= Index+1;	
				END IF;	
				SET X = X+1;
			END FOR;	
		
		--Else send all return request having latest timestamp	
		ELSE
			
			--Get All Values of ItemStatusChangeDate in an array
			FOR COUNT AS Input.Order.OrderItems.Item[] DO
				IF UCASE(Input.Order.OrderItems.Item[X].ItemStatusName) = 'PENDING RETURN' THEN
					SET ItemStatusDate.Value[Y] = CAST(SUBSTRING(Input.Order.OrderItems.Item[X].ItemStatusChangeDate FROM 1 FOR 19) AS TIMESTAMP FORMAT 'YYYY-MM-dd''T''HH:mm:ss'); 
					SET Y = Y+1;
				END IF;	
				SET X = X+1;
			END FOR;
			
			--Reset X,Y
			SET X = 1;
			SET Y = 1;
				
			-- Find latest ItemStatusChangeDate
			SET LatestStatusDate 	= ItemStatusDate.Value[1];
			FOR COUNT AS ItemStatusDate.Value[] DO
				IF LatestStatusDate < ItemStatusDate.Value[X+1] THEN
					SET LatestStatusDate = ItemStatusDate.Value[X+1];
				END IF;	
				SET X = X+1;
			END FOR;
			
			--Reset X
			SET X = 1;
			
			--Loop to send only those items for which status is pending return
			FOR COUNT AS Input.Order.OrderItems.Item[] DO
				--Find Item based on LatestStatusDate to pick only latest Item for which status is changed
				SET K = CAST(SUBSTRING(Input.Order.OrderItems.Item[X].ItemStatusChangeDate FROM 1 FOR 19) AS TIMESTAMP FORMAT 'YYYY-MM-dd''T''HH:mm:ss');
				SET L = LatestStatusDate;
				IF (UCASE(Input.Order.OrderItems.Item[X].ItemStatusName) = 'PENDING RETURN')  AND (LatestStatusDate = CAST(SUBSTRING(Input.Order.OrderItems.Item[X].ItemStatusChangeDate FROM 1 FOR 19) AS TIMESTAMP FORMAT 'YYYY-MM-dd''T''HH:mm:ss')) THEN
					
					--Loop to get value of Return Reason ID
					FOR COUNT1 AS Input.Order.OrderNotes.Item[] DO
						IF Input.Order.OrderNotes.Item[Y].Group = '2' THEN
							SET Reason 		= Input.Order.OrderNotes.Item[Y].NoteMessage;
							SET ReasonId	= TRIM(SUBSTRING(Input.Order.OrderNotes.Item[Y].NoteMessage BEFORE '.'));
						END IF;	
						SET Y = Y+1;
					END FOR;
					
					--Reset Y
					SET Y = 1;
					
					--Get Current index value and value of element ID from OrderItems.
					SET OrderItemIndex	= X;
					SET OrderItemID		= Input.Order.OrderItems.Item[OrderItemIndex].ID;
	
					--Loop to find corresponding OrderShipments Item Index for OrderItems Item based on OrderItemID Value.
					FOR COUNT1 AS Input.Order.OrderShipments.Item[] DO
						SET Z = 1;
						FOR COUNT1 AS Input.Order.OrderShipments.Item[Y].Items.Item[] DO
							IF OrderItemID = Input.Order.OrderShipments.Item[Y].Items.Item[Z].OrderItemID THEN
								SET ShpmntItemsIndex	=	Z;
								SET ShpmntIndex			=	Y;
							END IF;
							SET Z	= Z+1;
						END FOR;
						SET Y	= Y+1;
					END FOR;	
					
					--Throw error if Index to get WarehouseCountNumber is not found
					IF ShpmntIndex = '' OR ShpmntIndex IS NULL THEN
							THROW USER EXCEPTION MESSAGE 417 VALUES('Validation Error, WarehouseCountNumber not found for OrderNumber - '||Input.Order.OrderNumber );
					END IF;	
					
					--Reset Y
					SET Y = 1;
					SET Z = 1;
					
					--Get value of SKU
					SET Style 	= SUBSTRING(Input.Order.OrderItems.Item[OrderItemIndex].DeckSKU BEFORE '-');
					SET Temp	= SUBSTRING(Input.Order.OrderItems.Item[OrderItemIndex].DeckSKU AFTER '-');
					SET Colour	= SUBSTRING(Temp BEFORE '-');
					SET Size	= SUBSTRING(Temp AFTER '-');
					
					--Mapping Output to BPOIS API fromat
					SET OutputRoot.JSON.Data.Item[Index].returnId 			= '';
					SET OutputRoot.JSON.Data.Item[Index].orderId 			= Input.Order.OrderNumber || '-' ||CAST(Input.Order.OrderShipments.Item[ShpmntIndex].WarehouseCountNumber AS CHAR);
					SET OutputRoot.JSON.Data.Item[Index].returnDate 		= COALESCE(SUBSTRING(Input.Order.OrderItems.Item[OrderItemIndex].ItemStatusChangeDate BEFORE 'T'), ' ');
			--		SET OutputRoot.JSON.Data.Item[Index].dueDate 			= '';
					
					IF ReasonId <>'' OR ReasonId IS NOT NULL THEN
						SET OutputRoot.JSON.Data.Item[Index].returnReason 	= ReasonId;
					END IF;
					SET ReasonList											= ReasonList ||' '|| COALESCE(ReasonId,'');	 
					
			--		SET OutputRoot.JSON.Data.Item[Index].returnOfficer 		= '';
					SET OutputRoot.JSON.Data.Item[Index].sku			 	= com.nb.esb.iib.cmn.util.esql.utilities.compositeFieldForSKU(Style,Colour,Size);
					SET SkuList												= SkuList ||' '|| com.nb.esb.iib.cmn.util.esql.utilities.compositeFieldForSKU(Style,Colour,Size);
			--		SET OutputRoot.JSON.Data.Item[Index].upc		 		= '';
					SET OutputRoot.JSON.Data.Item[Index].returnQuantity 	= 1;
			--		SET OutputRoot.JSON.Data.Item[Index].altReturnNumber	= '';
					
					SET Index	= Index+1;	
				END IF;	
				
				SET X	= X+1;
			END FOR;	
			
		END IF;	
		
		SET Environment.Variables.Reason	= ReasonList;
		SET Environment.Variables.SKU		= SkuList;
		
		--Reset X
		SET X = 1;
		
		--Increase quantity if same item is sent in a separate line item.
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;	
		SET ItemsCount = CARDINALITY(outRef.Item[]);
		WHILE X < ItemsCount DO
			SET I = 1;
			WHILE I < ItemsCount DO
				SET DetachFlag = 'N';
				IF outRef.Item[X].sku = outRef.Item[X+I].sku THEN
					SET outRef.Item[X].returnQuantity = CAST(outRef.Item[X].returnQuantity AS INTEGER) + 1;
					DETACH outRef.Item[X+1];
					SET DetachFlag = 'Y';	
					SET ItemsCount = CARDINALITY(outRef.Item[]);				
				END IF;	
				
				IF DetachFlag = 'N' THEN
					SET I = I + 1;
				ELSE
					SET I = I;
				END IF;		
				
			END WHILE;
			
			SET X = X + 1;
		END WHILE;
		
		SET OutputRoot.Properties 				= NULL;
		--SET Environment.Variables.OutputMsg		= outRef;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
